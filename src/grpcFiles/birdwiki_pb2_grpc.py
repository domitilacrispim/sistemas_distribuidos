# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from grpcFiles import birdwiki_pb2 as birdwiki__pb2


class BirdWikiStub(object):
  """Definição do serviço
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.listBirds = channel.unary_stream(
        '/BirdWiki/listBirds',
        request_serializer=birdwiki__pb2.BirdName.SerializeToString,
        response_deserializer=birdwiki__pb2.BirdInfo.FromString,
        )
    self.getBird = channel.unary_unary(
        '/BirdWiki/getBird',
        request_serializer=birdwiki__pb2.BirdName.SerializeToString,
        response_deserializer=birdwiki__pb2.BirdInfo.FromString,
        )
    self.readBird = channel.unary_unary(
        '/BirdWiki/readBird',
        request_serializer=birdwiki__pb2.BirdName.SerializeToString,
        response_deserializer=birdwiki__pb2.BirdPage.FromString,
        )
    self.editBird = channel.unary_unary(
        '/BirdWiki/editBird',
        request_serializer=birdwiki__pb2.BirdName.SerializeToString,
        response_deserializer=birdwiki__pb2.BirdPage.FromString,
        )
    self.saveBird = channel.unary_unary(
        '/BirdWiki/saveBird',
        request_serializer=birdwiki__pb2.BirdPage.SerializeToString,
        response_deserializer=birdwiki__pb2.Confirmation.FromString,
        )


class BirdWikiServicer(object):
  """Definição do serviço
  """

  def listBirds(self, request, context):
    """Lista as várias aves com base no nome informado pelo cliente
    Se não tiver nome, então liste todas
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getBird(self, request, context):
    """Recebe requisição para pegar dados da ave
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def readBird(self, request, context):
    """Retorna a página do passarinho informado pelo cliente
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def editBird(self, request, context):
    """edita a pagina do passaro
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def saveBird(self, request, context):
    """Recebe a página do passarinho
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BirdWikiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'listBirds': grpc.unary_stream_rpc_method_handler(
          servicer.listBirds,
          request_deserializer=birdwiki__pb2.BirdName.FromString,
          response_serializer=birdwiki__pb2.BirdInfo.SerializeToString,
      ),
      'getBird': grpc.unary_unary_rpc_method_handler(
          servicer.getBird,
          request_deserializer=birdwiki__pb2.BirdName.FromString,
          response_serializer=birdwiki__pb2.BirdInfo.SerializeToString,
      ),
      'readBird': grpc.unary_unary_rpc_method_handler(
          servicer.readBird,
          request_deserializer=birdwiki__pb2.BirdName.FromString,
          response_serializer=birdwiki__pb2.BirdPage.SerializeToString,
      ),
      'editBird': grpc.unary_unary_rpc_method_handler(
          servicer.editBird,
          request_deserializer=birdwiki__pb2.BirdName.FromString,
          response_serializer=birdwiki__pb2.BirdPage.SerializeToString,
      ),
      'saveBird': grpc.unary_unary_rpc_method_handler(
          servicer.saveBird,
          request_deserializer=birdwiki__pb2.BirdPage.FromString,
          response_serializer=birdwiki__pb2.Confirmation.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'BirdWiki', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
